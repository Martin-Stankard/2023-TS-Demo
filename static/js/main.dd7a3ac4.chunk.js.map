{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","_ref","pokemon","onClick","react_default","a","createElement","Fragment","key","id","name","english","type","join","PokemonInfo","_ref2","base","Object","keys","map","App","_React$useState","React","useState","_React$useState2","slicedToArray","filter","filterSet","_React$useState3","_React$useState4","pokemonSet","_React$useState5","_React$useState6","selectedPokemon","selectedPokemonSet","useEffect","fetch","then","resp","json","data","style","margin","width","paddingTop","className","display","gridTemplateColumns","gridColumnGap","value","onChange","evt","target","_ref3","toLocaleLowerCase","includes","slice","App_PokemonRow","App_PokemonInfo","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.dd7a3ac4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst PokemonType = PropTypes.shape({\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.shape({\r\n    english: PropTypes.string.isRequired,\r\n    japanese: PropTypes.string.isRequired,\r\n    chinese: PropTypes.string.isRequired,\r\n    french: PropTypes.string.isRequired,\r\n  }),\r\n  type: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  base: PropTypes.shape({\r\n    HP: PropTypes.number.isRequired,\r\n    Attack: PropTypes.number.isRequired,\r\n    Defense: PropTypes.number.isRequired,\r\n    \"Sp. Attack\": PropTypes.number.isRequired,\r\n    \"Sp. Defense\": PropTypes.number.isRequired,\r\n    Speed: PropTypes.number.isRequired,\r\n  }),\r\n});\r\n\r\nconst PokemonRow = ({ pokemon, onClick }) => (\r\n  <>\r\n    <tr key={pokemon.id}>\r\n      <td>{pokemon.name.english}</td>\r\n      <td>{pokemon.type.join(\", \")}</td>\r\n      <td>\r\n        <button onClick={() => onClick(pokemon)}>More Information</button>\r\n      </td>\r\n    </tr>\r\n  </>\r\n);\r\n\r\nPokemonRow.propTypes = {\r\n  pokemon: PropTypes.arrayOf(PokemonType),\r\n};\r\n\r\nconst PokemonInfo = ({ name: { english }, base }) => (\r\n  <div>\r\n    <h2>{english}</h2>\r\n    <table>\r\n      <tbody>\r\n        {Object.keys(base).map((key) => (\r\n          <tr key={key}>\r\n            <td>{key}</td>\r\n            <td>{base[key]}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n);\r\n\r\nPokemonInfo.propTypes = PokemonType;\r\n\r\nfunction App() {\r\n  const [filter, filterSet] = React.useState(\"\");\r\n  const [pokemon, pokemonSet] = React.useState(null);\r\n  const [selectedPokemon, selectedPokemonSet] = React.useState(null);\r\n\r\n  React.useEffect(() => {\r\n    fetch(\"2023-ts-demo/pokemon.json\")\r\n      .then((resp) => resp.json())\r\n      .then((data) => pokemonSet(data));\r\n  }, []);\r\n\r\n  if (!pokemon) {\r\n    return <div>Loading data</div>;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: \"auto\",\r\n        width: 800,\r\n        paddingTop: \"1em\",\r\n      }}\r\n    >\r\n      <h1 className=\"title\">Pokemon Search</h1>\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"80% 20%\",\r\n          gridColumnGap: \"1rem\",\r\n        }}\r\n      >\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            value={filter}\r\n            onChange={(evt) => filterSet(evt.target.value)}\r\n          />\r\n          <table width=\"100%\">\r\n            <tbody>\r\n              {pokemon\r\n                .filter(({ name: { english } }) =>\r\n                  english\r\n                    .toLocaleLowerCase()\r\n                    .includes(filter.toLocaleLowerCase())\r\n                )\r\n                .slice(0, 20)\r\n                .map((pokemon) => (\r\n                  <PokemonRow\r\n                    pokemon={pokemon}\r\n                    onClick={(pokemon) => selectedPokemonSet(pokemon)}\r\n                  />\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {selectedPokemon && <PokemonInfo {...selectedPokemon} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
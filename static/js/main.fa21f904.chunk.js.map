{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","_ref","pokemon","onSelect","react_default","a","createElement","name","english","type","join","onClick","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","filter","filterSet","_React$useState3","_React$useState4","selectedItem","selectedItemSet","style","margin","width","paddingTop","className","display","gridTemplateColumns","gridColumnGap","value","onChange","evt","target","toLowerCase","includes","slice","map","App_PokemonRow","key","id","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"4MAMMA,EAAa,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAASC,EAAZF,EAAYE,SAAZ,OACjBC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKJ,EAAQK,KAAKC,SAClBJ,EAAAC,EAAAC,cAAA,UAAKJ,EAAQO,KAAKC,KAAK,OACvBN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACAK,QAAS,kBAAKR,EAASD,KADvB,UA2ESU,MAxDf,WAAe,IAAAC,EACeC,IAAMC,SAAS,IAD9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACNM,EADMH,EAAA,GACEI,EADFJ,EAAA,GAAAK,EAE2BP,IAAMC,SAAS,MAF1CO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEQE,EAFRF,EAAA,GAGb,OACElB,EAAAC,EAAAC,cAAA,OACEmB,MAAO,CACLC,OAAQ,OACRC,MAAO,IACPC,WAAY,SAGdxB,EAAAC,EAAAC,cAAA,MAAIuB,UAAU,SAAd,kBACAzB,EAAAC,EAAAC,cAAA,OACEmB,MAAO,CACLK,QAAS,OACTC,oBAAqB,UACrBC,cAAe,SAGjB5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACE2B,MAAOd,EACPe,SAAU,SAACC,GAAD,OAASf,EAAUe,EAAIC,OAAOH,UAG1C7B,EAAAC,EAAAC,cAAA,SAAOqB,MAAM,QACXvB,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBAGJF,EAAAC,EAAAC,cAAA,aACGJ,EACEiB,OAAO,SAACjB,GAAD,OACNA,EAAQK,KAAKC,QACV6B,cACAC,SAASnB,EAAOkB,iBAEpBE,MAAM,EAAG,IACTC,IAAI,SAACtC,GAAD,OACHE,EAAAC,EAAAC,cAACmC,EAAD,CAAYvC,QAASA,EAASwC,IAAKxC,EAAQyC,GAAIxC,SAAU,SAACD,GAAD,OAAYsB,EAAgBtB,WAK9FqB,GACCnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKiB,EAAahB,KAAKC,aClEpBoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAhD,GAAiD,IAA9CkD,EAA8ClD,EAA9CkD,OAAQC,EAAsCnD,EAAtCmD,OAAQC,EAA8BpD,EAA9BoD,OAAQC,EAAsBrD,EAAtBqD,OAAQC,EAActD,EAAdsD,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHxD,EAAAC,EAAAC,cAACF,EAAAC,EAAMwD,WAAP,KACEzD,EAAAC,EAAAC,cAACwD,EAAD,QAOJlB","file":"static/js/main.fa21f904.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./App.css\";\r\nimport pokemon from \"./pokemon.json\";\r\n\r\nconst PokemonRow = ({ pokemon, onSelect }) => (\r\n  <tr>\r\n    <td>{pokemon.name.english}</td>\r\n    <td>{pokemon.type.join(\", \")}</td>\r\n    <td>\r\n      <button\r\n      onClick={()=> onSelect(pokemon)}\r\n      >SEL</button>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\nPokemonRow.propTypes = {\r\n  pokemon: PropTypes.shape({\r\n    name: PropTypes.shape({\r\n      english: PropTypes.string,\r\n    }),\r\n    type: PropTypes.arrayOf(PropTypes.string),\r\n  }),\r\n  onSelect: PropTypes.func,\r\n};\r\n\r\n\r\n\r\nfunction App() {\r\n  const [filter, filterSet] = React.useState(\"\");\r\n  const [selectedItem, selectedItemSet] = React.useState(null);\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: \"auto\",\r\n        width: 800,\r\n        paddingTop: \"1rem\",\r\n      }}\r\n    >\r\n      <h1 className=\"title\">Pokemon Search</h1>\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"70% 30%\",\r\n          gridColumnGap: \"1rem\",\r\n        }}\r\n      >\r\n        <div>\r\n          <input\r\n            value={filter}\r\n            onChange={(evt) => filterSet(evt.target.value)}\r\n          ></input>\r\n\r\n          <table width=\"100%\">\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Type</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {pokemon\r\n                .filter((pokemon) =>\r\n                  pokemon.name.english\r\n                    .toLowerCase()\r\n                    .includes(filter.toLowerCase())\r\n                )\r\n                .slice(0, 20)\r\n                .map((pokemon) => (\r\n                  <PokemonRow pokemon={pokemon} key={pokemon.id} onSelect={(pokemon)=> selectedItemSet(pokemon)}/>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {selectedItem && (\r\n          <div> \r\n            <h1>{selectedItem.name.english}</h1>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}